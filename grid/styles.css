*{
    margin: 0;
    box-sizing: border-box;
}
body{
    font-family: Arial, Helvetica, sans-serif;
}
.container{
    width: 90%;
    height: 1200px;
    outline: 2px solid #000;
    margin: 40px auto;
    display: grid;
        /* Como hacemos que se puedan crear columans y filas dinamicamente (dependiendo el contexto) para esto se usa el repeat(auto-fit,minmax())
        
       - el autofit quiere decir que se ajuste a un cierto tamaño
       -en el min-max se le dice que el tamaño minimo que debe tener la columna y el otro parametro como maximo debe ser ejemplo una fracion (1fr)
       
       CONCLUSION: AUTOFIT LO QUE HACE ES CALCULAR CUANTAS COLUMNAS SE PUEDEN CREAR DEACUERDO AL ESPACIO DISPONIBLE*/
    grid-template-columns: repeat(auto-fit,minmax(250px,1fr));
    /* grid-template-rows: repeat(5,1fr); */
    /* otra manera de hacer posicionar a nuetros elementos es atraves de areas PARA DEFINIR FILAS SE PONEN COMILLAS  */
    /* grid-template-areas: 
    "element1 element1 element1 element2 element2"
    Aca estamos diciendo que las 3 primeras areas o celdas van a tener este nombre (element1) y las 2 ultimas van a tener el nombre de element2 DE ESTA FORMA YA SE TIENE LA PRIMERA FILA DEFINIDA, luego se definen las otras filas  
    "element1 element1 element1 element2 element2"
    "element3 element3 element3 element2 element2"
    "element3 element3 element3 element2 element2"
    "element4 element4 element4 element4 element4"
    ; */

    /* Despues se define la celda de esa fila(cad celda es definidas por las columnas en este caso se colocan 5 nombres por que hay 5 columnas  ; */
    gap: 10px 
    /* Para crear columnas esta la propiedad */
    /* grid-template-columns: repeat(3,1fr); */
    /* El grid-auto-rows: define que todas las filas toman un espacio automatico, ene ste caso dividen el espacio sobrante entre las filas   */
    /* grid-auto-rows: 100px; */
    /* grid-template-rows: repeat(10,1fr); */
    /* La funcion repeat nos ayuda a crear multiples coolumnas  repeat(10,) el primer parametro es el numero de veces que se va a crear una columna o fila y el segundo la unidad que tendra */

    /* EL FR ES LA UNDIAD DE MEDIDA DE GRID, si distribuye en filas y columnas ejemplo: repeat(3,1fr) distribuye en 3 columnas de una fraccion */

    /* Row-gap nos permite dar espaciados entre filas */
    /* row-gap: 1em ; */

    /* columb-gap permite crear espaciados entre columnas */
     /* column-gap: 1em; */

     /*gap: nos permite dar espaciados entre columnas y filas  */
     /* gap: 20px 10px; 
     
     EL PRIMER VALOR PARA FILAS Y EL SEGUNDO PARA COLUMNAS*/


    /* SE PUEDEN POSiCIONAS LOS GRID ITEMS EN BASE A LAS LINEAS */

}
.item{

    /* SI lo elementos no tienen un ancho o alto definido  en grid se estiran por defecto*/
    /* width: 100px;
    height: 100px; */
    color: #fff;
    font-size: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
 
}
.item1{
       /* El grid column acepta dos valores, el primero es entero y luego se separa con diagonal (/) y el segundo es entero tambien INDICA LA LINEA INCIAL Y FINAL 
       grid-column: lineainicial/lineafinal;*/
    /* grid-column: 1/4; */
    /* Grid-row: es exactamente lo mismo pero ahora de las lineas en filas  */
    /* grid-row: 1/3; */
    background-color: aqua;
    /* En caso de que hayamos definido los harias solo hace falta agregar la propiedad grid-area: */
    /* grid-area: element1 ; */
    background-image: url("./img/img1.jpg");
    background-size: cover;
    background-position: center;
}
.item2{background-color: chocolate;
    /* grid-column: 4/6;
    grid-row: 1/5; */
    /* grid-area: element2; */
    background-image: url("./img/img2.jpg");
    background-size: cover;
    background-position: center;
}
.item3{
    /* grid-column: 1/4;
    grid-row: 3/5; */
    background-color: cadetblue;
    /* grid-area: element3; */
    background-image: url("./img/img3.jpg");
    background-size: cover;
    background-position: center;
}
.item4{
    /* grid-column: 1/-1; */
    /* Si se coloca -1 se indica  que va hasta el final de la grid */
    background-color:darkgreen ;
    /* grid-row: 5/-1; */
    /* grid-area: element4; */
    background-image: url("./img/img4.jpg");
    background-size: cover;
    background-position: center;
}
.item5{
    background-color: darkmagenta;
    background-image: url("./img/img5.jpg");
    background-size: cover;
    background-position: center;
}
.item6{
    background-color: gold;
    background-image: url("./img/img6.jpg");
    background-size: cover;
    background-position: center;
}
/* @media(min-width:700px ){
    .container{
  
        grid-template-columns: repeat(5,1fr);
        grid-template-rows: repeat(5,1fr); */
        /* otra manera de hacer posicionar a nuetros elementos es atraves de areas PARA DEFINIR FILAS SE PONEN COMILLAS  */
        /* grid-template-areas: 
        "element1 element1 element1 element2 element2"
        
        "element1 element1 element1 element2 element2"
        "element3 element3 element3 element2 element2"
        "element3 element3 element3 element2 element2"
        "element4 element4 element4 element2 ."
        ; */
    /* } */
    /* La ventaja de usar areas es que podermos cambiar la posicion del elementoi simplemente cambiando la area  */
    /* si queremos que una celda se quede vacia  se pone un punto(.)*/
/* } */